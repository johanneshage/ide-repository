from Math.concatenate import concatenate
from bs4 import BeautifulSoup  # benötigt: pip install beautifulsoup4 und pip install lxml

"""graph = {
    's1': {'v': (1,1), 'w': (1,2)},
    's2': {'x': (2,3), 'w': (1,1)},
    'v': {'t1': (1,5), 'a': (1,1)},
    'w': {'a': (1,2), 'b': (2,2)},
    'x': {'a': (1,1), 'b': (2,1)},
    'a': {'t1': (2,4), 'b': (1,1)},
    'b': {'a': (1,1), 'v': (1,1)},
    't1': {}
}
graph = {
    's1': {'v': (1,1), 'w': (1,2)},
    's2': {'x': (2,3), 'w': (1,1)},
    'v': {'t1': (1,5), 'a': (1,1)},
    'w': {'a': (1,2)},
    'x': {'a': (1,1)},
    'a': {'t1': (2,4)},
    't1': {}
}

u = [[[(0.1, 4.5), (4, 1.5), (5,0)]] + [[(0, 4.2), (1.1, 4.4), (2, 0)]] + 6 * [[]]]

graph = {
    's1': {'v': (2,1), 'w': (2,1)},
    's2': {'v': (2,1), 'w': (2,1.3)},
    'v': {'t1': (1,2.5), 't2': (1,2)},
    'w': {'t1': (1,2), 't2': (1,2)},
    't1': {},
    't2': {}
}

u = [[[(0,3), (2,0)]] + [[(0,1),(2,0)]] + 4 * [[]]] + [[[(0,2), (2,0)]] + 5 * [[]]]
print(u)
# Anzahl Güter/unterschiedlicher Senken
I = 2


graph = {
    's1': {'v1': (1,1), 'v2': (1,1), 'v3': (1,1)},
    's2': {'v1': (1,1), 'v2': (1,1), 'v3': (1,1)},
    'v1': {'t1': (1,2)},
    'v2': {'w': (1,1)},
    'v3': {'w': (1,1)},
    'w': {'t1': (1,1), 't2': (1,1)},
    't1': {},
    't2': {}
}

u = [[[(0, 4), (1,0)]] + 7 * [[]], [[]] + [[(0, 3), (1, 0)]] + 6 * [[]]]


graph = {
    's1': {'v': (1,1), 't1': (1,2), 't2': (1,2)},
    'v': {'t1': (1,1), 't2': (1,1)},
    't1': {},
    't2': {}
}

u = [[[(0,4), (1,0)], [], [], []], [[(0,3), (1,0)], [], [], []]]
"""

"""
graph = {
    's1': {'v1': (1,1), 'v2': (1,1), 'v3': (1,1)},
    's2': {'v1': (1,1), 'v2': (1,1), 'v3': (1,1)},
    's3': {'s1': (1,2), 's2': (1,1)},
    'v1': {'t1': (1,2)},
    'v2': {'w': (1,1)},
    'v3': {'w': (1,1)},
    'w': {'t1': (1,1), 't2': (1,1)},
    't1': {'t3': (1,1)},
    't2': {'t3': (1,1)},
    't3': {}
}

u = [[[(0, 4), (1,0)]] + [[(0, 1), (0.5,0)]] + 8 * [[]], [[(0, 1), (0.5,0)]] + [[(0, 3), (1, 0)]] + 8 * [[]], 2 * [[]] + [[(0,3), (1,0)]] + 7 * [[]]]


graph = {
    's1': {'v': (1,1), 'w': (1,2)},
    'v': {'t1': (1,1), 't2': (1,1)},
    'w': {'v': (1,1)},
    't1': {},
    't2': {}
}

u = [[[(0,3), (1,0)], [], [], [], []], [[(0,1), (1,0)], [], [], [], []]]

graph = {
    's1': {'v': (3,1), 'w': (1,1)},
    'v': {'t1': (1,1), 't2': (1,1)},
    'w': {'t2': (1,1)},
    't1': {},
    't2': {}
}

u = [[[(0, 1), (2,0)], [], [], [], []], [[(0, 4), (2,0)], [], [], [], []]]"""

"""graph = {
    's': {'a': (3,1), 'b':(2,1), 'c':(1,1)},
    'a': {'d': (2,1), 'e': (1,2)},
    'b': {'e': (1,2)},
    'c': {'e': (1,2), 't2': (1,5)},
    'd': {'f': (1,1), 'g': (3,2)},
    'e': {'g': (1,1), 't2': (1,3)},
    'f': {'t2': (1,3)},
    'g': {'t1': (1,2), 't2': (1,2)},
    't1': {},
    't2': {}
}

u = [[[(0,5), (1,0)], [], [], [], [], [], [], [], [], []], [[(0,4), (1,0)], [(0,4), (1,0)], [], [], [(0,6), (1,0)], [], [], [], [], []]]"""

"""graph = {
    's': {'v': (1,1), 'w': (3,2)},
    'v': {'a': (5,1), 'b': (1,1)},
    'w': {'t1': (1,1)},
    'a': {'t1': (1,1), 't2': (1,1)},
    'b': {'t1': (1,1)},
    't1': {},
    't2': {},
}

u = [[[(0,6), (1,0)], [(0,6), (1,0)], [], [], [], [], []], [[], [(0,50), (1,0)], [], [], [], [], []]]"""

"""graph = {
    's1': {'a': (2,1), 'b': (1,1)},
    'a': {'c': (1,1), 't2': (1,2)},
    'b': {'d': (1,1), 'e': (1,1)},
    'c': {'t1': (1,1)},
    'd': {'t1': (1,1)},
    'e': {'t2': (1,1)},
    't1': {},
    't2': {}
}

u = [[[(0, 5), (1, 0), (2, 2), (3, 0)], [], [], [(0, 2), (1, 0)], [(1, 4), (1.5, 0)], [], [], []],
     [[(1, 2), (2, 0)], [], [], [], [], [(1, 4), (2, 0)], [], []]]"""

graph = {
    's': {'a': (1,1), 'b': (3,1), 'c': (1,1)},
    'a': {'d': (2,1), 'e': (1,1)},
    'b': {'e': (1,1), 'f': (1,1)},
    'c': {'f': (2,1), 'g': (1,1)},  # 7, 8
    'd': {'e': (1,1), 'h': (1,1), 't1': (1,2)},  # 9, 10, 11
    'e': {'h': (1,1)},  # 12
    'f': {'h': (1,1), 'i': (1,1)},  # 13, 14
    'g': {'f': (2,1), 'i': (1,1)},  # 15, 16
    'h': {'i': (1,1), 't1': (1,1), 't2': (1,1)},  # 17, 18, 19
    'i': {'t1': (1,3), 't3': (1,1)},  # 20, 21
    't1': {'t2': (1,1), 't3': (2,1)},  # 22, 23
    't2': {},
    't3': {}
}

u = [[[(0,3), (1,0)], [], [], [], [], [], [], [(0,7), (2,0)], [(0,5), (1,0)], [], [], [], []],
     [[(0,2), (1,0)], [], [], [], [(0,4), (1,0)], [], [], [], [(0,5), (1,0)], [], [], [], []],
     [[(0,2), (1,0)], [], [(0,3), (1,0)], [], [], [(1,4), (2,0)], [], [], [(0,5), (1,0)], [], [], [], []]]

"""graph = {
    's': {'a': (3,1), 'b': (1,1), 'c': (1,1)},
    'a': {'t1': (1,1), 't2': (1,1)},
    'b': {'t1': (1,1), 't2': (1,1)},
    'c': {'t2': (1,1)},
    't1': {},
    't2': {}
}

u = [[[(0,4), (1,0)], [], [], [], [], []],
#u = [[[], [], [], [], [], []],
     [[(0,3.5), (1,0)], [], [], [(0,2), (1,0)], [], []]]"""

"""graph = {
    's1': {'a': (1, 1), 'b': (2, 1)},
    'a': {'c': (1, 1), 't2': (1, 3)},
    'b': {'d': (1, 1), 'e': (1, 1)},
    'c': {'t1': (1, 1)},
    'd': {'t1': (1, 1)},
    'e': {'t2': (1, 1)},
    't1': {},
    't2': {}
}

u = [[[(0, 5), (1, 0)], [], [], [(0, 2), (1, 0)], [(1, 4), (1.5, 0)], [], [], []],
     [[(1, 2), (2, 0)], [], [], [], [], [(1, 6), (1.5, 0)], [], []]]"""

"""graph = {
    's1': {'v': (2,1), 't1': (1,3)},
    's2': {'s1': (1,1), 't1': (1,1)},
    'v': {'s2': (2,1)},
    't1': {}
}

u = [[[(0,3), (1,0)], [(1, 4), (2,0)], [], []]]"""

"""A = {
    'v1': {'v2': (1,1)},
    'v2': {'v3': (1,1), 'v6': (1,1)},
    'v3': {'v4': (1,1)},
    'v4': {'v5': (1,1)},
    'v5': {'v1': (1,1)},
    'v6': {'v7': (1,1)},
    'v7': {'v1': (1,1)},
}

T2 = 12 * [A]
D1 = {'2': {'(v2, v1)': (1,3)}}
D2 = {'3': {'(v2, v1)': (1,3)}}
D3 = {'4': {'(v2, v1)': (1,3)}}
D4 = {'5': {'(v2, v1)': (1,3)}}
D5 = {'6': {'(v2, v1)': (1,3)}}
D6 = {'7': {'(v2, v1)': (1,3)}}
D7 = {'8': {'(v2, v1)': (1,3)}}
D8 = {'9': {'(v2, v1)': (1,3)}}
D9 = {'10': {'(v2, v1)': (1,3)}}
D10 = {'11': {'(v2, v1)': (1,3)}}
D11 = {'12': {'(v2, v1)': (1,3)}}
D12 = {}
Z2 = [D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12]

B2 = concatenate(T2,Z2)

T5 = 6 * [A]
D1 = {'2': {'(v2, v1)': (1,3)}}
D2 = {'3': {'(v2, v1)': (1,3)}}
D3 = {'4': {'(v2, v1)': (1,3)}}
D4 = {'5': {'(v2, v1)': (1,3)}}
D5 = {'6': {'(v2, v1)': (1,3)}}
D6 = {}
Z5 = [D1, D2, D3, D4, D5, D6]

B5 = concatenate(T5, Z5)

T7 = 9 * [A]
D1 = {'2': {'(v2, v1)': (1,3)}}
D2 = {'3': {'(v2, v1)': (1,3)}}
D3 = {'4': {'(v2, v1)': (1,3)}}
D4 = {'5': {'(v2, v1)': (1,3)}}
D5 = {'6': {'(v2, v1)': (1,3)}}
D6 = {'7': {'(v2, v1)': (1,3)}}
D7 = {'8': {'(v2, v1)': (1,3)}}
D8 = {'9': {'(v2, v1)': (1,3)}}
D9 = {}
Z7 = [D1, D2, D3, D4, D5, D6, D7, D8, D9]

B7 = concatenate(T7, Z7)

vP = {
    'v2-0': {},
    'v5-0': {},
    'v7-0': {},
    'v2-1': {},
    'v5-1': {},
    'v7-1': {},
    'v2-2': {},
    'v5-2': {},
    'v7-2': {},
    'v2-3': {},
    'v5-3': {},
    'v7-3': {},
    'v2-4': {},
    'v5-4': {},
    'v7-4': {}
}
TC = 5 * [B2] + 5 * [B5] + 5 * [B7] + [vP]
B20 = {
        '16': {
                '(v2_1, v2-0)': (1,1), '(v5_1, v5-0)': (1,1), '(v7_1, v7-0)': (1,1),          # A+0
                '(v2_2, v2-0)': (1,1), '(v5_2, v5-0)': (1,1), '(v7_2, v7-0)': (1,1),          # A+0
                '(v2_3, v2-0)': (1,1), '(v5_3, v5-0)': (1,1), '(v7_3, v7-0)': (1,1),          # A+0
                '(v2_4, v2-0)': (1,1), '(v5_4, v5-0)': (1,1), '(v7_4, v7-0)': (1,1),          # A+0
                '(v2_5, v2-1)': (1,1), '(v5_5, v5-1)': (1,1), '(v7_5, v7-1)': (1,1),          # A+1
                '(v2_6, v2-1)': (1,1), '(v5_6, v5-1)': (1,1), '(v7_6, v7-1)': (1,1),          # A+1
                '(v2_7, v2-1)': (1,1), '(v5_7, v5-1)': (1,1), '(v7_7, v7-1)': (1,1),          # A+1
                '(v2_8, v2-1)': (1,1), '(v5_8, v5-1)': (1,1), '(v7_8, v7-1)': (1,1),          # A+1
                '(v2_9, v2-2)': (1,1), '(v5_9, v5-2)': (1,1), '(v7_9, v7-2)': (1,1),          # A+2
                '(v2_10, v2-2)': (1,1), '(v5_10, v5-2)': (1,1), '(v7_10, v7-2)': (1,1),       # A+2
                '(v2_11, v2-2)': (1,1), '(v5_11, v5-2)': (1,1), '(v7_11, v7-2)': (1,1),       # A+2
                '(v2_12, v2-2)': (1,1), '(v5_12, v5-2)': (1,1), '(v7_12, v7-2)': (1,1)        # A+2
        }
}

B21 = {
        '16': {
                '(v2_1, v2-1)': (1,1), '(v5_1, v5-1)': (1,1), '(v7_1, v7-1)': (1,1),          # A+1
                '(v2_2, v2-1)': (1,1), '(v5_2, v5-1)': (1,1), '(v7_2, v7-1)': (1,1),          # A+1
                '(v2_3, v2-1)': (1,1), '(v5_3, v5-1)': (1,1), '(v7_3, v7-1)': (1,1),          # A+1
                '(v2_4, v2-1)': (1,1), '(v5_4, v5-1)': (1,1), '(v7_4, v7-1)': (1,1),          # A+1
                '(v2_5, v2-2)': (1,1), '(v5_5, v5-2)': (1,1), '(v7_5, v7-2)': (1,1),          # A+2
                '(v2_6, v2-2)': (1,1), '(v5_6, v5-2)': (1,1), '(v7_6, v7-2)': (1,1),          # A+2
                '(v2_7, v2-2)': (1,1), '(v5_7, v5-2)': (1,1), '(v7_7, v7-2)': (1,1),          # A+2
                '(v2_8, v2-2)': (1,1), '(v5_8, v5-2)': (1,1), '(v7_8, v7-2)': (1,1),          # A+2
                '(v2_9, v2-3)': (1,1), '(v5_9, v5-3)': (1,1), '(v7_9, v7-3)': (1,1),          # A+3
                '(v2_10, v2-3)': (1,1), '(v5_10, v5-3)': (1,1), '(v7_10, v7-3)': (1,1),       # A+3
                '(v2_11, v2-3)': (1,1), '(v5_11, v5-3)': (1,1), '(v7_11, v7-3)': (1,1),       # A+3
                '(v2_12, v2-3)': (1,1), '(v5_12, v5-3)': (1,1), '(v7_12, v7-3)': (1,1)        # A+3
        }
}

B22 = {
        '16': {
                '(v2_1, v2-2)': (1,1), '(v5_1, v5-2)': (1,1), '(v7_1, v7-2)': (1,1),          # A+2
                '(v2_2, v2-2)': (1,1), '(v5_2, v5-2)': (1,1), '(v7_2, v7-2)': (1,1),          # A+2
                '(v2_3, v2-2)': (1,1), '(v5_3, v5-2)': (1,1), '(v7_3, v7-2)': (1,1),          # A+2
                '(v2_4, v2-2)': (1,1), '(v5_4, v5-2)': (1,1), '(v7_4, v7-2)': (1,1),          # A+2
                '(v2_5, v2-3)': (1,1), '(v5_5, v5-3)': (1,1), '(v7_5, v7-3)': (1,1),          # A+3
                '(v2_6, v2-3)': (1,1), '(v5_6, v5-3)': (1,1), '(v7_6, v7-3)': (1,1),          # A+3
                '(v2_7, v2-3)': (1,1), '(v5_7, v5-3)': (1,1), '(v7_7, v7-3)': (1,1),          # A+3
                '(v2_8, v2-3)': (1,1), '(v5_8, v5-3)': (1,1), '(v7_8, v7-3)': (1,1),          # A+3
                '(v2_9, v2-4)': (1,1), '(v5_9, v5-4)': (1,1), '(v7_9, v7-4)': (1,1),          # A+4
                '(v2_10, v2-4)': (1,1), '(v5_10, v5-4)': (1,1), '(v7_10, v7-4)': (1,1),       # A+4
                '(v2_11, v2-4)': (1,1), '(v5_11, v5-4)': (1,1), '(v7_11, v7-4)': (1,1),       # A+4
                '(v2_12, v2-4)': (1,1), '(v5_12, v5-4)': (1,1), '(v7_12, v7-4)': (1,1)        # A+4
        }
}

B23 = {
        '16': {
                '(v2_1, v2-3)': (1,1), '(v5_1, v5-3)': (1,1), '(v7_1, v7-3)': (1,1),          # A+3
                '(v2_2, v2-3)': (1,1), '(v5_2, v5-3)': (1,1), '(v7_2, v7-3)': (1,1),          # A+3
                '(v2_3, v2-3)': (1,1), '(v5_3, v5-3)': (1,1), '(v7_3, v7-3)': (1,1),          # A+3
                '(v2_4, v2-3)': (1,1), '(v5_4, v5-3)': (1,1), '(v7_4, v7-3)': (1,1),          # A+3
                '(v2_5, v2-4)': (1,1), '(v5_5, v5-4)': (1,1), '(v7_5, v7-4)': (1,1),          # A+4
                '(v2_6, v2-4)': (1,1), '(v5_6, v5-4)': (1,1), '(v7_6, v7-4)': (1,1),          # A+4
                '(v2_7, v2-4)': (1,1), '(v5_7, v5-4)': (1,1), '(v7_7, v7-4)': (1,1),          # A+4
                '(v2_8, v2-4)': (1,1), '(v5_8, v5-4)': (1,1), '(v7_8, v7-4)': (1,1),          # A+4
                '(v2_9, v2-0)': (1,1), '(v5_9, v5-0)': (1,1), '(v7_9, v7-0)': (1,1),          # A+5
                '(v2_10, v2-0)': (1,1), '(v5_10, v5-0)': (1,1), '(v7_10, v7-0)': (1,1),       # A+5
                '(v2_11, v2-0)': (1,1), '(v5_11, v5-0)': (1,1), '(v7_11, v7-0)': (1,1),       # A+5
                '(v2_12, v2-0)': (1,1), '(v5_12, v5-0)': (1,1), '(v7_12, v7-0)': (1,1)        # A+5
        }
}

B24 = {
        '16': {
                '(v2_1, v2-4)': (1,1), '(v5_1, v5-4)': (1,1), '(v7_1, v7-4)': (1,1),          # A+4
                '(v2_2, v2-4)': (1,1), '(v5_2, v5-4)': (1,1), '(v7_2, v7-4)': (1,1),          # A+4
                '(v2_3, v2-4)': (1,1), '(v5_3, v5-4)': (1,1), '(v7_3, v7-4)': (1,1),          # A+4
                '(v2_4, v2-4)': (1,1), '(v5_4, v5-4)': (1,1), '(v7_4, v7-4)': (1,1),          # A+4
                '(v2_5, v2-0)': (1,1), '(v5_5, v5-0)': (1,1), '(v7_5, v7-0)': (1,1),          # A+5
                '(v2_6, v2-0)': (1,1), '(v5_6, v5-0)': (1,1), '(v7_6, v7-0)': (1,1),          # A+5
                '(v2_7, v2-0)': (1,1), '(v5_7, v5-0)': (1,1), '(v7_7, v7-0)': (1,1),          # A+5
                '(v2_8, v2-0)': (1,1), '(v5_8, v5-0)': (1,1), '(v7_8, v7-0)': (1,1),          # A+5
                '(v2_9, v2-1)': (1,1), '(v5_9, v5-1)': (1,1), '(v7_9, v7-1)': (1,1),          # A+6
                '(v2_10, v2-1)': (1,1), '(v5_10, v5-1)': (1,1), '(v7_10, v7-1)': (1,1),       # A+6
                '(v2_11, v2-1)': (1,1), '(v5_11, v5-1)': (1,1), '(v7_11, v7-1)': (1,1),       # A+6
                '(v2_12, v2-1)': (1,1), '(v5_12, v5-1)': (1,1), '(v7_12, v7-1)': (1,1)        # A+6
        }
}

B50 = {
        '16': {
                '(v2_1, v2-3)': (1,1), '(v5_1, v5-3)': (1,1), '(v7_1, v7-3)': (1,1),                # A+3
                '(v2_2, v2-3)': (1,1), '(v5_2, v5-3)': (1,1), '(v7_2, v7-3)': (1,1),                # A+3
                '(v2_3, v2-3)': (1,1), '(v5_3, v5-3)': (1,1), '(v7_3, v7-3)': (1,1),                # A+3
                '(v2_4, v2-4)': (1,1), '(v5_4, v5-4)': (1,1), '(v7_4, v7-4)': (1,1),                # A+4
                '(v2_5, v2-4)': (1,1), '(v5_5, v5-4)': (1,1), '(v7_5, v7-4)': (1,1),                # A+4
                '(v2_6, v2-4)': (1,1), '(v5_6, v5-4)': (1,1), '(v7_6, v7-4)': (1,1)                 # A+4
        }
}

B51 = {
        '16': {
                '(v2_1, v2-4)': (1,1), '(v5_1, v5-4)': (1,1), '(v7_1, v7-4)': (1,1),                # A+4
                '(v2_2, v2-4)': (1,1), '(v5_2, v5-4)': (1,1), '(v7_2, v7-4)': (1,1),                # A+4
                '(v2_3, v2-4)': (1,1), '(v5_3, v5-4)': (1,1), '(v7_3, v7-4)': (1,1),                # A+4
                '(v2_4, v2-0)': (1,1), '(v5_4, v5-0)': (1,1), '(v7_4, v7-0)': (1,1),                # A+5 = A+0
                '(v2_5, v2-0)': (1,1), '(v5_5, v5-0)': (1,1), '(v7_5, v7-0)': (1,1),                # A+5 = A+0
                '(v2_6, v2-0)': (1,1), '(v5_6, v5-0)': (1,1), '(v7_6, v7-0)': (1,1)                 # A+5 = A+0
        }
}

B52 = {
        '16': {
                '(v2_1, v2-0)': (1,1), '(v5_1, v5-0)': (1,1), '(v7_1, v7-0)': (1,1),                # A+5 = A+0
                '(v2_2, v2-0)': (1,1), '(v5_2, v5-0)': (1,1), '(v7_2, v7-0)': (1,1),                # A+5 = A+0
                '(v2_3, v2-0)': (1,1), '(v5_3, v5-0)': (1,1), '(v7_3, v7-0)': (1,1),                # A+5 = A+0
                '(v2_4, v2-1)': (1,1), '(v5_4, v5-1)': (1,1), '(v7_4, v7-1)': (1,1),                # A+6 = A+1
                '(v2_5, v2-1)': (1,1), '(v5_5, v5-1)': (1,1), '(v7_5, v7-1)': (1,1),                # A+6 = A+1
                '(v2_6, v2-1)': (1,1), '(v5_6, v5-1)': (1,1), '(v7_6, v7-1)': (1,1)                 # A+6 = A+1
        }
}

B53 = {
        '16': {
                '(v2_1, v2-1)': (1,1), '(v5_1, v5-1)': (1,1), '(v7_1, v7-1)': (1,1),                # A+6 = A+1
                '(v2_2, v2-1)': (1,1), '(v5_2, v5-1)': (1,1), '(v7_2, v7-1)': (1,1),                # A+6 = A+1
                '(v2_3, v2-1)': (1,1), '(v5_3, v5-1)': (1,1), '(v7_3, v7-1)': (1,1),                # A+6 = A+1
                '(v2_4, v2-2)': (1,1), '(v5_4, v5-2)': (1,1), '(v7_4, v7-2)': (1,1),                # A+2
                '(v2_5, v2-2)': (1,1), '(v5_5, v5-2)': (1,1), '(v7_5, v7-2)': (1,1),                # A+2
                '(v2_6, v2-2)': (1,1), '(v5_6, v5-2)': (1,1), '(v7_6, v7-2)': (1,1)                 # A+2
        }
}

B54 = {
        '16': {
                '(v2_1, v2-2)': (1,1), '(v5_1, v5-2)': (1,1), '(v7_1, v7-2)': (1,1),                # A+2
                '(v2_2, v2-2)': (1,1), '(v5_2, v5-2)': (1,1), '(v7_2, v7-2)': (1,1),                # A+2
                '(v2_3, v2-2)': (1,1), '(v5_3, v5-2)': (1,1), '(v7_3, v7-2)': (1,1),                # A+2
                '(v2_4, v2-3)': (1,1), '(v5_4, v5-3)': (1,1), '(v7_4, v7-3)': (1,1),                # A+3
                '(v2_5, v2-3)': (1,1), '(v5_5, v5-3)': (1,1), '(v7_5, v7-3)': (1,1),                # A+3
                '(v2_6, v2-3)': (1,1), '(v5_6, v5-3)': (1,1), '(v7_6, v7-3)': (1,1)                 # A+3
        }
}

B70 = {
        '16': {
                '(v2_1, v2-3)': (1,1), '(v5_1, v5-3)': (1,1), '(v7_1, v7-3)': (1,1),                # A+3
                '(v2_2, v2-3)': (1,1), '(v5_2, v5-3)': (1,1), '(v7_2, v7-3)': (1,1),                # A+3
                '(v2_3, v2-3)': (1,1), '(v5_3, v5-3)': (1,1), '(v7_3, v7-3)': (1,1),                # A+3
                '(v2_4, v2-4)': (1,1), '(v5_4, v5-4)': (1,1), '(v7_4, v7-4)': (1,1),                # A+4
                '(v2_5, v2-4)': (1,1), '(v5_5, v5-4)': (1,1), '(v7_5, v7-4)': (1,1),                # A+4
                '(v2_6, v2-4)': (1,1), '(v5_6, v5-4)': (1,1), '(v7_6, v7-4)': (1,1),                # A+4
                '(v2_7, v2-0)': (1,1), '(v5_7, v5-0)': (1,1), '(v7_7, v7-0)': (1,1),                # A+5 = A+0
                '(v2_8, v2-0)': (1,1), '(v5_8, v5-0)': (1,1), '(v7_8, v7-0)': (1,1),                # A+5 = A+0
                '(v2_9, v2-1)': (1,1), '(v5_9, v5-1)': (1,1), '(v7_9, v7-1)': (1,1)                 # A+6 = A+1
        }
}

B71 = {
        '16': {
                '(v2_1, v2-4)': (1,1), '(v5_1, v5-4)': (1,1), '(v7_1, v7-4)': (1,1),                # A+4
                '(v2_2, v2-4)': (1,1), '(v5_2, v5-4)': (1,1), '(v7_2, v7-4)': (1,1),                # A+4
                '(v2_3, v2-4)': (1,1), '(v5_3, v5-4)': (1,1), '(v7_3, v7-4)': (1,1),                # A+4
                '(v2_4, v2-0)': (1,1), '(v5_4, v5-0)': (1,1), '(v7_4, v7-0)': (1,1),                # A+5 = A+0
                '(v2_5, v2-0)': (1,1), '(v5_5, v5-0)': (1,1), '(v7_5, v7-0)': (1,1),                # A+5 = A+0
                '(v2_6, v2-0)': (1,1), '(v5_6, v5-0)': (1,1), '(v7_6, v7-0)': (1,1),                # A+5 = A+0
                '(v2_7, v2-1)': (1,1), '(v5_7, v5-1)': (1,1), '(v7_7, v7-1)': (1,1),                # A+6 = A+1
                '(v2_8, v2-1)': (1,1), '(v5_8, v5-1)': (1,1), '(v7_8, v7-1)': (1,1),                # A+6 = A+1
                '(v2_9, v2-2)': (1,1), '(v5_9, v5-2)': (1,1), '(v7_9, v7-2)': (1,1)                 # A+2
        }
}

B72 = {
        '16': {
                '(v2_1, v2-0)': (1,1), '(v5_1, v5-0)': (1,1), '(v7_1, v7-0)': (1,1),                # A+5 = A+0
                '(v2_2, v2-0)': (1,1), '(v5_2, v5-0)': (1,1), '(v7_2, v7-0)': (1,1),                # A+5 = A+0
                '(v2_3, v2-0)': (1,1), '(v5_3, v5-0)': (1,1), '(v7_3, v7-0)': (1,1),                # A+5 = A+0
                '(v2_4, v2-1)': (1,1), '(v5_4, v5-1)': (1,1), '(v7_4, v7-1)': (1,1),                # A+6 = A+1
                '(v2_5, v2-1)': (1,1), '(v5_5, v5-1)': (1,1), '(v7_5, v7-1)': (1,1),                # A+6 = A+1
                '(v2_6, v2-1)': (1,1), '(v5_6, v5-1)': (1,1), '(v7_6, v7-1)': (1,1),                # A+6 = A+1
                '(v2_7, v2-2)': (1,1), '(v5_7, v5-2)': (1,1), '(v7_7, v7-2)': (1,1),                # A+2
                '(v2_8, v2-2)': (1,1), '(v5_8, v5-2)': (1,1), '(v7_8, v7-2)': (1,1),                # A+2
                '(v2_9, v2-3)': (1,1), '(v5_9, v5-3)': (1,1), '(v7_9, v7-3)': (1,1)                 # A+3
        }
}

B73 = {
        '16': {
                '(v2_1, v2-1)': (1,1), '(v5_1, v5-1)': (1,1), '(v7_1, v7-1)': (1,1),                # A+6 = A+1
                '(v2_2, v2-1)': (1,1), '(v5_2, v5-1)': (1,1), '(v7_2, v7-1)': (1,1),                # A+6 = A+1
                '(v2_3, v2-1)': (1,1), '(v5_3, v5-1)': (1,1), '(v7_3, v7-1)': (1,1),                # A+6 = A+1
                '(v2_4, v2-2)': (1,1), '(v5_4, v5-2)': (1,1), '(v7_4, v7-2)': (1,1),                # A+2
                '(v2_5, v2-2)': (1,1), '(v5_5, v5-2)': (1,1), '(v7_5, v7-2)': (1,1),                # A+2
                '(v2_6, v2-2)': (1,1), '(v5_6, v5-2)': (1,1), '(v7_6, v7-2)': (1,1),                # A+2
                '(v2_7, v2-3)': (1,1), '(v5_7, v5-3)': (1,1), '(v7_7, v7-3)': (1,1),                # A+3
                '(v2_8, v2-3)': (1,1), '(v5_8, v5-3)': (1,1), '(v7_8, v7-3)': (1,1),                # A+3
                '(v2_9, v2-4)': (1,1), '(v5_9, v5-4)': (1,1), '(v7_9, v7-4)': (1,1)                 # A+4
        }
}

B74 = {
        '16': {
                '(v2_1, v2-2)': (1,1), '(v5_1, v5-2)': (1,1), '(v7_1, v7-2)': (1,1),                # A+2
                '(v2_2, v2-2)': (1,1), '(v5_2, v5-2)': (1,1), '(v7_2, v7-2)': (1,1),                # A+2
                '(v2_3, v2-2)': (1,1), '(v5_3, v5-2)': (1,1), '(v7_3, v7-2)': (1,1),                # A+2
                '(v2_4, v2-3)': (1,1), '(v5_4, v5-3)': (1,1), '(v7_4, v7-3)': (1,1),                # A+3
                '(v2_5, v2-3)': (1,1), '(v5_5, v5-3)': (1,1), '(v7_5, v7-3)': (1,1),                # A+3
                '(v2_6, v2-3)': (1,1), '(v5_6, v5-3)': (1,1), '(v7_6, v7-3)': (1,1),                # A+3
                '(v2_7, v2-4)': (1,1), '(v5_7, v5-4)': (1,1), '(v7_7, v7-4)': (1,1),                # A+4
                '(v2_8, v2-4)': (1,1), '(v5_8, v5-4)': (1,1), '(v7_8, v7-4)': (1,1),                # A+4
                '(v2_9, v2-0)': (1,1), '(v5_9, v5-0)': (1,1), '(v7_9, v7-0)': (1,1)                 # A+5 = A+0
        }
}

DvP = {}

ZC = [B20, B21, B22, B23, B24, B50, B51, B52, B53, B54, B70, B71, B72, B73, B74, DvP]

C = concatenate(TC, ZC)
Cs = C.copy()

src1 = {
    't1': {}
}

src2 = {
    't2': {}
}

T = [C, Cs, src1, src2]

D1 = {
    '2': {
           '(v2-0_16, v1_1_1)': (1,1),
           '(v2-1_16, v1_1_2)': (1,1),
           '(v2-2_16, v1_1_3)': (1,1),
           '(v2-3_16, v1_1_4)': (1,1),
           '(v2-4_16, v1_1_5)': (1,1),
           '(v5-0_16, v1_1_6)': (1,1),
           '(v5-1_16, v1_1_7)': (1,1),
           '(v5-2_16, v1_1_8)': (1,1),
           '(v5-3_16, v1_1_9)': (1,1),
           '(v5-4_16, v1_1_10)': (1,1),
           '(v7-0_16, v1_1_11)': (1,1),
           '(v7-1_16, v1_1_12)': (1,1),
           '(v7-2_16, v1_1_13)': (1,1),
           '(v7-3_16, v1_1_14)': (1,1),
           '(v7-4_16, v1_1_15)': (1,1)
    },
    '4': {
            '(v2_12_1, t2)': (1,1),
            '(v2_12_2, t2)': (1,1),
            '(v2_12_3, t2)': (1,1),
            '(v2_12_4, t2)': (1,1),
            '(v2_12_5, t2)': (1,1),
            '(v2_6_6, t2)': (1,25),     # B5 - Gadgets erhalten zusätzliche Reisedauer von 24, damit alle Pfade P2/P5/P7 gleich lang
            '(v2_6_7, t2)': (1,25),
            '(v2_6_8, t2)': (1,25),
            '(v2_6_9, t2)': (1,25),
            '(v2_6_10, t2)': (1,25),
            '(v2_9_11, t2)': (1,13),    # B7 - Gadgets erhalten zusätzliche Reisedauer von 12, damit alle Pfade P2/P5/P7 gleich lang
            '(v2_9_12, t2)': (1,13),
            '(v2_9_13, t2)': (1,13),
            '(v2_9_14, t2)': (1,13),
            '(v2_9_15, t2)': (1,13)
    }
}

D2 = {
    '1': {
        '(v2-0_16, v1_1_1)': (1,1),
        '(v2-1_16, v1_1_2)': (1,1),
        '(v2-2_16, v1_1_3)': (1,1),
        '(v2-3_16, v1_1_4)': (1,1),
        '(v2-4_16, v1_1_5)': (1,1),
        '(v5-0_16, v1_1_6)': (1,1),
        '(v5-1_16, v1_1_7)': (1,1),
        '(v5-2_16, v1_1_8)': (1,1),
        '(v5-3_16, v1_1_9)': (1,1),
        '(v5-4_16, v1_1_10)': (1,1),
        '(v7-0_16, v1_1_11)': (1,1),
        '(v7-1_16, v1_1_12)': (1,1),
        '(v7-2_16, v1_1_13)': (1,1),
        '(v7-3_16, v1_1_14)': (1,1),
        '(v7-4_16, v1_1_15)': (1,1)
    },
    '3': {
        '(v2_12_1, t1)': (1,1),
        '(v2_12_2, t1)': (1,1),
        '(v2_12_3, t1)': (1,1),
        '(v2_12_4, t1)': (1,1),
        '(v2_12_5, t1)': (1,1),
        '(v2_6_6, t1)': (1,25),      # B5 - Gadgets erhalten zusätzliche Reisedauer von 24, damit alle Pfade P2/P5/P7 gleich lang
        '(v2_6_7, t1)': (1,25),
        '(v2_6_8, t1)': (1,25),
        '(v2_6_9, t1)': (1,25),
        '(v2_6_10, t1)': (1,25),
        '(v2_9_11, t1)': (1,13),     # B7 - Gadgets erhalten zusätzliche Reisedauer von 12, damit alle Pfade P2/P5/P7 gleich lang
        '(v2_9_12, t1)': (1,13),
        '(v2_9_13, t1)': (1,13),
        '(v2_9_14, t1)': (1,13),
        '(v2_9_15, t1)': (1,13)
    }
}

D3 = {}
D4 = {}

Z = [D1, D2, D3, D4]

graph = concatenate(T, Z)

ninesixtylists = [[] for _ in range(960)]
fifteenlists = [[] for _ in range(15)]
sixlists = [[] for _ in range(6)]

u = [
    # Gut 1
    [
        # B2
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        # B2+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        # B2+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        # B2+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        # B2+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        # B5
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        # B5+1
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        # B5+2
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        # B5+3
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        # B5+4
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        # B7
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        # B7+1
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        # B7+2
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        # B7+3
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        # B7+4
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        # vP
        *fifteenlists,
        # Cs
        *ninesixtylists,
        # t1, t2
        [], []
    ],
    # Gut 2
    [
        # C
        *ninesixtylists,
        # C'
        # B2
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(0, 2), (1, 0)], *sixlists,   # A+0
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        # B2+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(1, 2), (2, 0)], *sixlists,   # A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        # B2+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        # B2+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        # B2+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        # B5
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        # B5+1
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        # B5+2
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        # B5+3
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        # B5+4
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        # B7
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        # B7+1
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        # B7+2
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        # B7+3
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(1, 2), (2, 0)], *sixlists,   # A+6 = A+1
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        # B7+4
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(2, 2), (3, 0)], *sixlists,   # A+2
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(3, 2), (4, 0)], *sixlists,   # A+3
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(4, 2), (5, 0)], *sixlists,   # A+4
        [(0, 2), (1, 0)], *sixlists,   # A+5 = A+0
        # vP
        *fifteenlists,
        # t1, t2
        [], []
    ]

]"""

'''with open('output_examples/holzkirchenNetwork.xml', 'r') as f:
    data = f.read()

Bs_data = BeautifulSoup(data, "xml")

b_nodes = Bs_data.find_all('node')  # 3052
b_edges = Bs_data.find_all('link')  # 7050
v_coords = {}

graph = {}
"""for v in b_nodes[:620]:
    v_id = v.get('id')
    graph['{}'.format(v_id)] = {}
    x_coord = v.get('x')
    y_coord = v.get('y')
    v_coords[v_id] = [x_coord, y_coord]

t2 = b_nodes[620]
t2_id = t2.get('id')
graph['t2'] = {}
x_coord = t2.get('x')
y_coord = t2.get('y')
v_coords['t2'] = [x_coord, y_coord]

for v in b_nodes[621:1572]:
    v_id = v.get('id')
    graph['{}'.format(v_id)] = {}
    x_coord = v.get('x')
    y_coord = v.get('y')
    v_coords[v_id] = [x_coord, y_coord]

t1 = b_nodes[1572]
t1_id = t1.get('id')
graph['t1'] = {}
x_coord = t1.get('x')
y_coord = t1.get('y')
v_coords['t1'] = [x_coord, y_coord]

for v in b_nodes[1573:]:
    v_id = v.get('id')
    graph['{}'.format(v_id)] = {}
    x_coord = v.get('x')
    y_coord = v.get('y')
    v_coords[v_id] = [x_coord, y_coord]"""

for v in b_nodes[:1928]:
    v_id = v.get('id')
    graph['{}'.format(v_id)] = {}
    x_coord = v.get('x')
    y_coord = v.get('y')
    v_coords[v_id] = [x_coord, y_coord]

t2 = b_nodes[1928]
t2_id = t2.get('id')
graph['t2'] = {}
x_coord = t2.get('x')
y_coord = t2.get('y')
v_coords['t2'] = [x_coord, y_coord]

for v in b_nodes[1929:2169]:
    v_id = v.get('id')
    graph['{}'.format(v_id)] = {}
    x_coord = v.get('x')
    y_coord = v.get('y')
    v_coords[v_id] = [x_coord, y_coord]

t1 = b_nodes[2169]
t1_id = t1.get('id')
graph['t1'] = {}
x_coord = t1.get('x')
y_coord = t1.get('y')
v_coords['t1'] = [x_coord, y_coord]

for v in b_nodes[2170:]:
    v_id = v.get('id')
    graph['{}'.format(v_id)] = {}
    x_coord = v.get('x')
    y_coord = v.get('y')
    v_coords[v_id] = [x_coord, y_coord]

for e in b_edges:
    nu = float(e.get('capacity'))
    if nu <= 1000:
        nu = 1
    elif nu <= 2500:
        nu = 2
    elif nu == 6000:
        nu = 3
    else:
        nu = 4
    """if nu == 300:
        nu = 1
    elif nu == 600:
        nu = 2
    elif nu == 1000:
        nu = 3
    elif nu == 1500:
        nu = 4
    elif nu == 2000:
        nu = 5
    elif nu == 2250:
        nu = 6
    elif nu == 6000:
        nu = 7
    elif nu == 8000:
        nu = 8
    else:
        nu = 9"""
    r = round(float(e.get('length')) / 100, 3)
    e1 = e.get('from')
    if e1 == t1_id:
        e1 = 't1'
    elif e1 == t2_id:
        e1 = 't2'
    e2 = e.get('to')
    if e2 == t1_id:
        e2 = 't1'
    elif e2 == t2_id:
        e2 = 't2'
    graph[e1][e2] = (nu, r)

"""threethirtylists = [[] for _ in range(330)]
twentytwentyonelists = [[] for _ in range(2721)]
twentyeightthirtyninelists = [[] for _ in range(2839)]
twotwelveliststs = [[] for _ in range(212)]
u = [[*threethirtylists, [(0, 2), (1, 0)], *twentytwentyonelists],
     [*twentyeightthirtyninelists, [(0, 2), (1, 0)], *twotwelveliststs]]"""


twentyfourthirtytwolists = [[] for _ in range(2432)]
sixnineteenlists = [[] for _ in range(619)]
u = [[*twentyfourthirtytwolists, [(0, 15), (2, 0)], *sixnineteenlists],
     [*twentyfourthirtytwolists, [(0, 14), (2, 0)], *sixnineteenlists]]'''

"""graph = {
    's1': {'s2': (1,1), 't1': (1, 4)},
    's2': {'t2': (1,1), 's3': (1, 1)},
    's3': {'t3': (1,1), 's4': (1, 1)},
    's4': {'t4': (1,1), 's1': (1, 1)},
    't1': {},
    't2': {'t1': (1,1)},
    't3': {'t1': (1,1)},
    't4': {'t1': (1,1)},
}

u = [[[(0, 1), (1, 0)], [], [], [], [], [], [], []],
     [[], [(5.0/6, 7), (2, 0)], [], [], [], [], [], []],
     [[], [], [(1.8, 6), (3, 0)], [], [], [], [], []],
     [[], [], [], [(2.75, 5), (4, 0)], [], [], [], [], []]]"""

"""graph = {
    's1': {'v1': (1,1), 'v2': (1,1), 't1': (1, 5)},
    'v1': {'v3': (1,1)},
    'v2': {'t2': (1,1), 'v4': (1,1)},
    'v3': {'t1': (1,3)},
    'v4': {'s2': (1,1)},
    't2': {},
    's2': {'w1': (1,1), 'w2': (1,1), 't2': (1, 5)},
    'w1': {'w3': (1,1)},
    'w2': {'t1': (1,1), 'w4': (1,1)},
    'w3': {'t2': (1,3)},
    'w4': {'s1': (1,1)},
    't1': {},
}

u = [[[(0, 4), (2, 0)], [], [], [], [], [], [], [], [], [], [], []],
     [[], [], [], [], [], [], [(0, 4), (1, 0)], [], [], [], [], []]]"""

"""graph = {
    's1': {'s2': (1,1), 'w': (1,2)},
    's2': {'v': (1,1), 'w':(1,1), 's1': (1,1)},
    'v': {'t1': (1,1)},
    'w': {'t1': (1,1)},
    't1': {'t2': (1,1)},
    't2': {}
}

u = [[[(0, 3), (1, 0)], [], [], [],  [], []],
     [[], [(0, 5), (1, 0)], [], [],  [], []]]"""

"""graph = {
    's1': {'v1': (0.5, 1), 'v2': (0.5, 1), 'v3': (1, 1)},
    'v1': {'t1': (1, 4)},
    'v2': {'t1': (1, 4)},
    'v3': {'v4': (1, 1), 't2': (1, 10)},
    'v4': {'s2': (1, 1)},
    's2': {'w1': (1, 1), 'w3': (1.0/3, 1), 'h1': (1.0/12, 0.5), 'h2': (1.0/12, 0.5), 'h3': (1.0/12, 0.5), 'h4': (1.0/12, 0.5)},
    # 's2': {'w1': (1, 1), 'h1': (1.0/12, 0.5), 'h2': (1.0/12, 0.5), 'h3': (1.0/12, 0.5), 'h4': (1.0/12, 0.5)},
    'w1': {'w2': (1, 1), 't1': (1, 1), 't2': (1, 13)},
    'w2': {'s1': (1, 1)},
    'w3': {'w4': (1, 2)},
    'w4': {'w5': (1, 2)},
    'w5': {'w6': (1, 2)},
    'w6': {'w7': (1, 2)},
    'w7': {'t2': (1, 1)},
    't1': {},
    't2': {},
    'h1': {'w3': (1, 0.5)},
    'h2': {'w3': (1, 0.5)},
    'h3': {'w3': (1, 0.5)},
    'h4': {'w3': (1, 0.5)},
}

u = [[[(1, 6), (2, 0)], [(1, 2), (2, 0)], [(1, 2), (2, 0)], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
     [[], [], [], [], [], [(1, 6), (2, 0)], [], [], [(0, 2), (1, 0)], [(0, 2), (1, 0)], [(0, 2), (1, 0)], [(0, 2), (1, 0)], [], [], [], [], [], [], []]]"""

"""graph = {
    's1': {'v1': (1, 1), 'w2': (1, 3)},
    'v1': {'s1': (1, 1), 'v2': (1, 1), 't2': (1, 1)},
    'v2': {'v1': (1, 1), 's2': (1, 1)},
    's2': {'v2': (1, 3), 'w1': (1, 1)},
    'w1': {'s2': (1, 1), 'w2': (1, 1), 't1': (1, 1)},
    'w2': {'w1': (1, 1), 's1': (1, 1)},
    't1': {},
    't2': {}
}

u = [[[(0, 3), (1, 0)], [], [], [], [], [], [], []],
    [[], [], [], [(0, 4), (1, 0)], [], [], [], []]]"""

"""graph = {
    's1': {'v12': (2, 1), 'v13': (1, 1)},
    's2': {'v12': (1, 1), 'v23': (1, 1)},
    's3': {'v13': (1, 1), 'v23': (1, 1)},
    'v12': {'s1': (1, 1), 's2': (1, 1), 't3': (1, 1)},
    'v13': {'s1': (1, 1), 's3': (1, 1), 't2': (1, 1)},
    'v23': {'s2': (1, 1), 's3': (1, 1), 't1': (1, 1)},
    't1': {},
    't2': {},
    't3': {}
}

u = [[[(0.1, 30.5), (1, 0)], [], [], [], [], [], [], [], []],
     [[], [(0, 20.25), (1, 0)], [], [], [], [], [], [], []],
     [[], [], [(0, 20.25), (1, 0)], [], [], [], [], [], []]]"""
